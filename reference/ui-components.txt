// app/[tenant]/dashboard/page.tsx
import { getProfile } from '@/lib/actions/member/getProfile';
import { ProfileCard } from '@/components/member/ProfileCard';
import { ErrorMessage } from '@/components/common/ErrorMessage';
import { Suspense } from 'react';

export default async function DashboardPage() {
  // Server Component can directly use server actions
  const profileResult = await getProfile();
  
  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">Member Dashboard</h1>
      
      {profileResult.success ? (
        <Suspense fallback={<div>Loading profile...</div>}>
          <ProfileCard profile={profileResult.data} />
        </Suspense>
      ) : (
        <ErrorMessage message={profileResult.error || 'Failed to load profile'} />
      )}
      
      {/* Other dashboard content */}
    </div>
  );
}

// components/member/ProfileCard.tsx
'use client'

import { useState } from 'react';
import { updateProfile } from '@/lib/actions/member/updateProfile';
import { ProfileData } from '@/lib/models/member/profile';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { toast } from '@/components/ui/toast';

interface ProfileCardProps {
  profile: ProfileData;
}

export function ProfileCard({ profile }: ProfileCardProps) {
  const [isEditing, setIsEditing] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  // Handle form submission
  async function handleSubmit(formData: FormData) {
    setIsSubmitting(true);
    
    try {
      const result = await updateProfile(formData);
      
      if (result.success) {
        toast({
          title: 'Profile Updated',
          description: 'Your profile has been successfully updated.',
          variant: 'success',
        });
        setIsEditing(false);
      } else {
        toast({
          title: 'Update Failed',
          description: result.error || 'Failed to update profile',
          variant: 'destructive',
        });
      }
    } catch (error) {
      toast({
        title: 'Error',
        description: 'An unexpected error occurred',
        variant: 'destructive',
      });
    } finally {
      setIsSubmitting(false);
    }
  }
  
  return (
    <Card className="w-full max-w-2xl">
      <CardHeader>
        <CardTitle className="flex justify-between items-center">
          <span>Profile Information</span>
          <Button 
            variant="outline" 
            onClick={() => setIsEditing(!isEditing)}
            disabled={isSubmitting}
          >
            {isEditing ? 'Cancel' : 'Edit'}
          </Button>
        </CardTitle>
      </CardHeader>
      
      <CardContent>
        {isEditing ? (
          <form action={handleSubmit}>
            <input type="hidden" name="memberId" value={profile.id} />
            
            <div className="grid gap-4 py-4">
              {/* Form fields */}
              <div className="grid grid-cols-4 items-center gap-4">
                <label htmlFor="firstName" className="text-right font-medium">
                  First Name
                </label>
                <input
                  id="firstName"
                  name="firstName"
                  defaultValue={profile.firstName}
                  className="col-span-3 p-2 border rounded"
                />
              </div>
              
              <div className="grid grid-cols-4 items-center gap-4">
                <label htmlFor="lastName" className="text-right font-medium">
                  Last Name
                </label>
                <input
                  id="lastName"
                  name="lastName"
                  defaultValue={profile.lastName}
                  className="col-span-3 p-2 border rounded"
                />
              </div>
              
              <div className="grid grid-cols-4 items-center gap-4">
                <label htmlFor="email" className="text-right font-medium">
                  Email
                </label>
                <input
                  id="email"
                  name="email"
                  type="email"
                  defaultValue={profile.email}
                  className="col-span-3 p-2 border rounded"
                />
              </div>
              
              <div className="grid grid-cols-4 items-center gap-4">
                <label htmlFor="phone" className="text-right font-medium">
                  Phone
                </label>
                <input
                  id="phone"
                  name="phone"
                  defaultValue={profile.phone}
                  className="col-span-3 p-2 border rounded"
                />
              </div>
            </div>
            
            <div className="flex justify-end space-x-2">
              <Button
                type="button"
                variant="outline"
                onClick={() => setIsEditing(false)}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button
                type="submit"
                disabled={isSubmitting}
              >
                {isSubmitting ? 'Saving...' : 'Save Changes'}
              </Button>
            </div>
          </form>
        ) : (
          <div className="space-y-4">
            <div className="grid grid-cols-4 gap-2">
              <span className="font-medium">Name:</span>
              <span className="col-span-3">{profile.firstName} {profile.lastName}</span>
            </div>
            
            <div className="grid grid-cols-4 gap-2">
              <span className="font-medium">Email:</span>
              <span className="col-span-3">{profile.email}</span>
            </div>
            
            <div className="grid grid-cols-4 gap-2">
              <span className="font-medium">Phone:</span>
              <span className="col-span-3">{profile.phone}</span>
            </div>
            
            <div className="grid grid-cols-4 gap-2">
              <span className="font-medium">Address:</span>
              <span className="col-span-3">
                {profile.address?.line1}
                {profile.address?.line2 && <span>, {profile.address.line2}</span>}
                <br />
                {profile.address?.city}, {profile.address?.state} {profile.address?.zipCode}
              </span>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
