// app/(protected)/(common)/member/dashboard/page.tsx
import { getProfile } from '@/app/actions/member/getProfile';
import { getPlans } from '@/app/actions/benefits/getPlans';
import { getClaims } from '@/app/actions/claims/getClaims'; // Assuming this exists
import { ProfileCard } from '@/components/member/ProfileCard';
import { PlanSummary } from '@/components/benefits/PlanSummary';
import { RecentClaims } from '@/components/claims/RecentClaims';
import { Suspense } from 'react';
import { LoadingCard } from '@/components/ui/LoadingCard';
import { ErrorCard } from '@/components/ui/ErrorCard';

/**
 * Member dashboard - uses React server components and Suspense
 * to fetch and display data with streaming
 */
export default async function MemberDashboardPage() {
  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 p-6">
      <section className="lg:col-span-3">
        <h1 className="text-2xl font-bold mb-6">Welcome to Your Dashboard</h1>
      </section>
      
      {/* Profile section */}
      <section className="lg:col-span-1">
        <Suspense fallback={<LoadingCard title="Your Profile" />}>
          <ProfileSection />
        </Suspense>
      </section>
      
      {/* Plan information */}
      <section className="lg:col-span-1">
        <Suspense fallback={<LoadingCard title="Your Plan" />}>
          <PlanSection />
        </Suspense>
      </section>
      
      {/* Recent claims */}
      <section className="lg:col-span-1">
        <Suspense fallback={<LoadingCard title="Recent Claims" />}>
          <ClaimsSection />
        </Suspense>
      </section>
    </div>
  );
}

// Separate async components to take advantage of Suspense and streaming
async function ProfileSection() {
  const profileResult = await getProfile();
  
  if (!profileResult.success) {
    return <ErrorCard title="Profile" error={profileResult.error || "Failed to load profile"} />;
  }
  
  return <ProfileCard profile={profileResult.data} />;
}

async function PlanSection() {
  const plansResult = await getPlans();
  
  if (!plansResult.success) {
    return <ErrorCard title="Plan Information" error={plansResult.error || "Failed to load plan information"} />;
  }
  
  const activePlans = plansResult.data.filter(plan => plan.status === 'ACTIVE');
  return <PlanSummary plans={activePlans} />;
}

async function ClaimsSection() {
  const claimsResult = await getClaims({ limit: 5 });
  
  if (!claimsResult.success) {
    return <ErrorCard title="Recent Claims" error={claimsResult.error || "Failed to load claims"} />;
  }
  
  return <RecentClaims claims={claimsResult.data} />;
}

// components/forms/ProfileForm.tsx
'use client'

import { updateProfile } from '@/app/actions/member/updateProfile';
import { MemberProfile } from '@/lib/types/member';
import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';

interface ProfileFormProps {
  profile: MemberProfile;
}

export function ProfileForm({ profile }: ProfileFormProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const router = useRouter();
  
  // Submit handler for the form
  async function handleSubmit(formData: FormData) {
    setIsSubmitting(true);
    setError(null);
    setValidationErrors({});
    
    try {
      // Call server action
      const result = await updateProfile(formData);
      
      if (!result.success) {
        setError(result.error || 'Failed to update profile');
        
        // Handle validation errors if present
        if (result.validationErrors) {
          const errors: Record<string, string> = {};
          
          Object.entries(result.validationErrors).forEach(([field, messages]) => {
            errors[field] = Array.isArray(messages) ? messages[0] : messages.toString();
          });
          
          setValidationErrors(errors);
        }
        
        return;
      }
      
      // Success! Refresh the page data
      router.refresh();
      
    } catch (e) {
      setError('An unexpected error occurred');
    } finally {
      setIsSubmitting(false);
    }
  }
  
  return (
    <form action={handleSubmit} className="space-y-4">
      <div>
        <label htmlFor="firstName" className="block text-sm font-medium">
          First Name
        </label>
        <Input
          id="firstName"
          name="firstName"
          defaultValue={profile.firstName}
          disabled={isSubmitting}
          error={validationErrors.firstName}
        />
      </div>
      
      <div>
        <label htmlFor="lastName" className="block text-sm font-medium">
          Last Name
        </label>
        <Input
          id="lastName"
          name="lastName"
          defaultValue={profile.lastName}
          disabled={isSubmitting}
          error={validationErrors.lastName}
        />
      </div>
      
      <div>
        <label htmlFor="email" className="block text-sm font-medium">
          Email
        </label>
        <Input
          id="email"
          name="email"
          type="email"
          defaultValue={profile.email}
          disabled={isSubmitting}
          error={validationErrors.email}
        />
      </div>
      
      <div>
        <label htmlFor="phone" className="block text-sm font-medium">
          Phone
        </label>
        <Input
          id="phone"
          name="phone"
          defaultValue={profile.phone}
          disabled={isSubmitting}
          error={validationErrors.phone}
        />
      </div>
      
      {error && (
        <div className="text-red-500 text-sm">
          {error}
        </div>
      )}
      
      <div>
        <Button
          type="submit"
          isLoading={isSubmitting}
          disabled={isSubmitting}
          loadingText="Saving..."
        >
          Save Changes
        </Button>
      </div>
    </form>
  );
}
