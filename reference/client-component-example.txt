// app/(protected)/(common)/member/dashboard/components/ProfileForm.tsx
'use client'

import { useState } from 'react';
import { updateProfile } from '@/app/actions/member/updateProfile';
import { ProfileData } from '@/lib/models/member';
import { useRouter } from 'next/navigation';

type ProfileFormProps = {
  profile: ProfileData;
};

export function ProfileForm({ profile }: ProfileFormProps) {
  const [isPending, setIsPending] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  
  // Using server action from a client component
  async function handleSubmit(formData: FormData) {
    setIsPending(true);
    setError(null);
    
    try {
      // Call the server action directly
      const response = await updateProfile(formData);
      
      if (!response.success) {
        setError(response.error || 'Failed to update profile');
        return;
      }
      
      // Refresh the page data
      router.refresh();
      
    } catch (e) {
      setError('An unexpected error occurred');
    } finally {
      setIsPending(false);
    }
  }
  
  return (
    <form action={handleSubmit}>
      <div className="space-y-4">
        <div>
          <label htmlFor="firstName" className="block text-sm font-medium">
            First Name
          </label>
          <input
            type="text"
            id="firstName"
            name="firstName"
            defaultValue={profile.firstName}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
            disabled={isPending}
          />
        </div>
        
        <div>
          <label htmlFor="lastName" className="block text-sm font-medium">
            Last Name
          </label>
          <input
            type="text"
            id="lastName"
            name="lastName"
            defaultValue={profile.lastName}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
            disabled={isPending}
          />
        </div>
        
        <div>
          <label htmlFor="email" className="block text-sm font-medium">
            Email Address
          </label>
          <input
            type="email"
            id="email"
            name="email"
            defaultValue={profile.email}
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm"
            disabled={isPending}
          />
        </div>
        
        {error && (
          <div className="text-red-500 text-sm">
            {error}
          </div>
        )}
        
        <div>
          <button
            type="submit"
            className="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            disabled={isPending}
          >
            {isPending ? 'Saving...' : 'Save Changes'}
          </button>
        </div>
      </div>
    </form>
  );
}
